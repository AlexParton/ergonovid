{"version":3,"file":"static/js/50.8250c466.chunk.js","mappings":"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","sources":["webpack://ergonomic/./src/components/UI/Input.module.css?b6ae","components/UI/Input.js","components/UI/Loader.js","pages/RegisterPage.js","webpack://ergonomic/./src/pages/RegisterPage.module.css?8287"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"InputWrapper\":\"Input_InputWrapper__Ca8i+\",\"focused\":\"Input_focused__GHKum\"};","import { useEffect, useState } from 'react';\nimport classes from './Input.module.css';\n\nconst Input = props => {\n\n    const [isFocused, setIsFocused] = useState(false);\n    const [inputValue, setInputValue] = useState((!!props.value) ? props.value : '')\n\n    const [hasValue, setHasValue] = useState(false);\n\n    const [isTouched, setIsTouched] = useState(false);\n    const valueIsValid = inputValue.trim() !== '';\n    const hasError = !valueIsValid && isTouched;\n    \n    const checkValue = () => {\n        (inputValue === '') ? setHasValue(false) : setHasValue(true);\n        setIsFocused(false);\n        setIsTouched(true);\n    };\n\n    const onChangeHandler = (event) => {\n        setInputValue(event.target.value);\n        setTimeout(() => {\n           \n            props.onInputChange(event);\n        }, 300)\n      \n    };\n\n    useEffect(() => {\n        if (!!props.value) {\n            (props.value !== '') && setHasValue(true);\n            setInputValue(props.value)\n        } \n    },[props.value])\n\n    \n   \n    return (\n        <div className={`${classes.InputWrapper} ${isFocused ? 'focused' : ''} ${hasValue ? 'withValue' : ''} ${hasError ? 'error' : ''}`}>\n            <label htmlFor={props.name}>{props.label}</label>\n            <input\n            value={inputValue}  \n             onFocus={() => setIsFocused(true)} \n             onBlur={checkValue} \n             onChange={onChangeHandler}\n             type={props.type} name={props.name}/>\n        </div>\n    )\n}\n\nexport default Input;","const Loader = () => {\n    return(<div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>   )\n}\n\nexport default Loader;","import { GiBarefoot } from \"react-icons/gi\";\nimport classes from './RegisterPage.module.css';\nimport Input from '../components/UI/Input';\nimport {  Fragment, useState } from \"react\";\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, updatePassword } from \"firebase/auth\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { collection, doc, setDoc, getFirestore } from \"firebase/firestore\";\nimport MyFirebase from \"../database/firebase\";\nimport Loader from \"../components/UI/Loader\";\n\n\nconst RegisterPage = props => {\n    const app = MyFirebase();\n    const db = getFirestore(app);\n    const location = useLocation();\n    const [isEntrar, setIsEntrar] = useState(true);\n\n    const textRepeatPass = 'Repetir contraseña';\n    const textWrongPass = 'Contraseña denegada';\n    const textWrongEmail = 'Este email no está registrado';\n    const textVoidEmail = 'Introduce tu dirección de email';\n    const textPassMatch = 'Las contraseñas no coinciden';\n    const textPassInvalid ='La contraseña tiene que ser de 6 caracteres mínimo';\n    const textVoidName = 'Elige un nombre de usuario';\n    const textEmailExists = 'Este email ya está registrado';\n    const textEmailNotExists = 'Este email no está registrado';\n    const textNewPass = 'Nueva contraseña';\n    const textNewPassRepeat = 'Repetir nueva contraseña';\n    const textUserName = 'Nombre de usuario';\n    const textConfirm = 'CONFIRMAR CAMBIOS';\n    const textConfirmPasschange = 'La contraseña se ha cambiado';\n    const textEmail = 'Dirección de email';\n    const textPass = 'Contraseña';\n    const textLogin = 'ENTRAR';\n    const textRegister = 'REGISTRARSE';\n    const dontHave = '¿Todavía no tienes cuenta? ';\n    const alreadyHave = '¿Ya tienes cuenta? ';\n    const textEnter = ' ¡Entra!';\n    const textRegistra = '¡Regístrate!';\n    const textForgot = 'Olvidé mi contraseña';\n    const textRecovery = 'Recibir email de recuperación';\n    const textRecoverySent = 'Email de recuperación enviado';\n    const backRegister = 'Volver al registro';\n\n    const [enteredName, setEnteredName] = useState('');\n    const nameHandler = (event) => {\n        setShowErr(false);\n        setEnteredName((event.target.value));\n    }\n\n    const [enteredEmail, setEnteredEmail] = useState('');\n    const emailHandler = (event) => {\n        setShowErr(false);\n        setEnteredEmail((event.target.value));\n        setResetErrorMessage('')\n    }\n\n    const [enteredPass, setEnteredPass] = useState('');\n    const passHandler = (event) => {\n        setShowErr(false);\n        setEnteredPass((event.target.value))\n    }\n\n    const [enteredRepeatedPass, setEnteredRepeatedPass] = useState('');\n    const repeatedPassHandler = (event) => {\n        setShowErr(false);\n        setEnteredRepeatedPass((event.target.value))\n    }\n\n    const repeatPass = (!isEntrar) ? <Input onInputChange={repeatedPassHandler} name='password' type='password'  label={textRepeatPass}/> : '';\n    const passIsTheSame = (enteredPass === enteredRepeatedPass);\n    const auth = getAuth();\n\n    const navigate = useNavigate();\n\n    const [errMessage, setErrMessage] = useState('');\n    const [showErr, setShowErr] = useState(false);\n    \n    const [isLoading, setIsLoading] = useState(false);\n    \n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        if (isEntrar) {\n           \n            signInWithEmailAndPassword(auth, enteredEmail, enteredPass)\n            .then((userCredential) => {\n                const user = userCredential.user;\n                localStorage.setItem('uid', user.uid);\n                navigate('/');\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                console.log(errorMessage)\n                if (errorCode === 'auth/wrong-password') {\n                    setErrMessage(textWrongPass);\n                    setShowErr(true);\n                }\n                if (errorCode === 'auth/user-not-found') {\n                    setErrMessage(textWrongEmail);\n                    setShowErr(true);\n                }\n            });\n        } else {\n            if (!enteredEmail) {\n                setErrMessage(textVoidEmail);\n                setShowErr(true);\n                return\n            }\n            \n            if (!passIsTheSame) {\n                setErrMessage(textPassMatch);\n                setShowErr(true);\n                return\n            }\n           \n            if (enteredPass.length < 6) {\n                setErrMessage(textPassInvalid);\n                setShowErr(true);\n            }\n\n            if (!enteredName) {\n                setErrMessage(textVoidName);\n                setShowErr(true);\n                return\n            }\n\n            createUserWithEmailAndPassword(auth, enteredEmail, enteredPass)\n            .then((userCredential) => {\n        \n                const user = userCredential.user;\n                localStorage.setItem('uid', user.uid);\n                const hash = enteredName.toLowerCase().replace(' ', '') + Math.floor(Math.random() * 1000000);\n                const usersRef = collection(db, \"users\");\n                \n                const newUser = {displayName: enteredName, avatarId: '', userId: user.uid, hash: hash, engagedTo: [], createdEventos: [] };\n                setDoc(doc(usersRef, user.uid), newUser);\n               \n                setIsLoading(true);\n                setTimeout(() => {\n                    setIsLoading(false);\n                    navigate(`/`)\n                }, 2000)\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                console.log(errorMessage)\n                if (errorCode === 'auth/email-already-in-use') {\n                    setErrMessage(textEmailExists);\n                    setShowErr(true);\n                }\n                // ..\n            });\n        }\n\n    }\n\n    const [isForgotten, setIsForgotten] = useState(false);\n    const [resetSent, setResetSent] = useState(false);\n    const [resetErrorMessage, setResetErrorMessage] = useState('');\n\n    const handleForgotten = () => {\n        if (enteredEmail !== '') {\n            sendPasswordResetEmail(auth, enteredEmail)\n            .then(() => {\n                setResetSent(true);\n                setTimeout(() => {\n                    setIsForgotten(false)\n                    setResetSent(false);\n                }, 2000)\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                if (errorCode === 'auth/user-not-found') {\n                \n                    setResetErrorMessage(textEmailNotExists)\n                }\n                console.log(errorCode)\n                // ..\n            });\n        }\n    }\n\n    const [passwordChangedOk, setPasswordChangedOk] = useState(false);\n    const submitPassChangeHandler = () => {\n        if (passIsTheSame) {\n            updatePassword(auth.currentUser, enteredPass).then(() => {\n                setPasswordChangedOk(true);\n                setTimeout(() => {\n                    navigate('/')\n                }, 2000)\n              }).catch((error) => {\n                console.log(error)\n              });\n        }\n    }\n  \n    if (location.state === 'passchange') {\n        return (\n            <section className={classes.Register}>\n                <div className={classes.Header}>\n                    <GiBarefoot />\n                    <h1>ERGONOMIC</h1>\n                </div>\n                <form className={classes.Form} onSubmit={submitPassChangeHandler}>\n                    <Input onInputChange={passHandler} name='password' type='password'  label={textNewPass}/>\n                    <Input onInputChange={repeatedPassHandler} name='password' type='password'  label={textNewPassRepeat}/>\n                    {!isEntrar && <Input onInputChange={nameHandler} name='name' type='text'  label={textUserName}/>}\n                    {(showErr) ? <p className=\"warning\">{errMessage}</p> : ''}\n                    <button>{textConfirm}</button>\n                    {passwordChangedOk && <h2>{textConfirmPasschange}</h2>}\n                </form>\n            </section>\n        );\n    }\n\n    return(\n        <section className={classes.Register}>\n            <div className={classes.Header}>\n                <GiBarefoot />\n                <h1>ERGONOMIC</h1>\n            </div>\n            {(isLoading)\n             ? <div className={classes.Success}>\n                 <h2>REGISTRO CONFIRMADO</h2>\n                <Loader />\n              </div>\n             : <Fragment>\n                 {(!isForgotten)\n                  ? <Fragment>\n                      <form className={classes.Form} onSubmit={submitHandler}>\n                        <Input onInputChange={emailHandler} name='email' type='text'  label={textEmail}/>\n                        <Input onInputChange={passHandler} name='password' type='password'  label={textPass}/>\n                        {repeatPass}\n                        {!isEntrar && <Input onInputChange={nameHandler} name='name' type='text'  label={textUserName}/>}\n                        {(showErr) ? <p className=\"warning\">{errMessage}</p> : ''}\n                        <button>{(isEntrar) ? textLogin : textRegister}</button>\n                        </form>\n                        {isEntrar && <button onClick={() => setIsForgotten(true)} className={classes.Forgot}>{textForgot}</button>} \n                        <button \n                            onClick={() => setIsEntrar(!isEntrar)} \n                            className={classes.Cta2}>{(isEntrar) ? dontHave : alreadyHave} \n                            <strong>{(isEntrar) ? textRegistra : textEnter}</strong>\n                        </button>\n                    </Fragment>\n                  : <Fragment>\n                       <Input onInputChange={emailHandler} name='email' type='text'  label={textEmail}/>\n                       <button onClick={handleForgotten} className={classes.SendRecovery}>{textRecovery}</button>\n                       {(resetErrorMessage !== '') && <h2>{resetErrorMessage}</h2>}\n                       {resetSent ? <h2>{textRecoverySent}</h2> : <button onClick={() => setIsForgotten(false)} className={classes.Forgot}>{backRegister}</button>}\n                    </Fragment> \n                 }\n                </Fragment>\n            }\n        </section>\n    )\n}\n\nexport default RegisterPage;","// extracted by mini-css-extract-plugin\nexport default {\"Register\":\"RegisterPage_Register__xe-B+\",\"Header\":\"RegisterPage_Header__LerCO\",\"SendRecovery\":\"RegisterPage_SendRecovery__JUWSz\",\"Success\":\"RegisterPage_Success__bkBqi\",\"Forgot\":\"RegisterPage_Forgot__SZPvw\",\"Terms\":\"RegisterPage_Terms__OgyQB\"};"],"names":["props","useState","isFocused","setIsFocused","value","inputValue","setInputValue","hasValue","setHasValue","isTouched","setIsTouched","hasError","trim","useEffect","className","classes","htmlFor","name","label","onFocus","onBlur","onChange","event","target","setTimeout","onInputChange","type","app","MyFirebase","db","getFirestore","location","useLocation","isEntrar","setIsEntrar","textUserName","textEmail","enteredName","setEnteredName","nameHandler","setShowErr","enteredEmail","setEnteredEmail","emailHandler","setResetErrorMessage","enteredPass","setEnteredPass","passHandler","enteredRepeatedPass","setEnteredRepeatedPass","repeatedPassHandler","repeatPass","passIsTheSame","auth","getAuth","navigate","useNavigate","errMessage","setErrMessage","showErr","isLoading","setIsLoading","isForgotten","setIsForgotten","resetSent","setResetSent","resetErrorMessage","passwordChangedOk","setPasswordChangedOk","state","onSubmit","updatePassword","currentUser","then","catch","error","console","log","Fragment","onClick","sendPasswordResetEmail","errorCode","code","preventDefault","signInWithEmailAndPassword","userCredential","user","localStorage","setItem","uid","errorMessage","message","length","createUserWithEmailAndPassword","hash","toLowerCase","replace","Math","floor","random","usersRef","collection","newUser","displayName","avatarId","userId","engagedTo","createdEventos","setDoc","doc"],"sourceRoot":""}